---
name: CI

on:  # yamllint disable-line rule:truthy
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  workflow_dispatch:

jobs:

  # Quality jobs ----------------------

  code-quality:
    name: Code Quality
    runs-on: "ubuntu-latest"
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.3

      - name: Set up Python
        uses: actions/setup-python@v2.2.1
        with:
          python-version: "3.9"

      - name: Install Poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Configure Poetry
        run: |
          poetry config cache-dir "${GITHUB_WORKSPACE}/.cache/pypoetry"
          poetry config virtualenvs.in-project true
          poetry config --list

      - name: Install dependencies
        run: |
          make provision_environment

      - name: Install Go for pre-commit hook (shfmt)
        run: >
          GO_TAR=go1.15.linux-amd64.tar.gz &&
          wget --quiet https://golang.org/dl/$GO_TAR &&
          sudo tar -C /usr/local -xzf $GO_TAR &&
          rm $GO_TAR &&
          export GO111MODULE=on &&
          export CGO_ENABLED=0 &&
          export GOOS=linux &&
          export GOARCH=amd64 &&
          export PATH="${PATH}:/usr/local/go/bin"

      - name: "Run static analysis"
        run: |
          make pre-commit

  # Security jobs ----------------------

  dependency-security-vulnerability-analysis:
    name: Dependency Security Vulnerability Analysis
    runs-on: "ubuntu-latest"
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.3

      - name: Set up Python
        uses: actions/setup-python@v2.2.1
        with:
          python-version: "3.9"

      - name: Install Poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Configure Poetry
        run: |
          poetry config cache-dir "${GITHUB_WORKSPACE}/.cache/pypoetry"
          poetry config virtualenvs.in-project true
          poetry config --list

      - name: Install dependencies
        run: |
          make provision_environment

      - name: Run dependency security vulnerability analysis
        run: |
          make scan-dependencies
