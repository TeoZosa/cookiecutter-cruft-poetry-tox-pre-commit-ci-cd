[tool.poetry]
name = "cookiecutter-cruft-poetry-tox-pre-commit-ci-cd"
version = "0.6.0"
description = "Standardized Python project creation and synchronization"
authors = ["Teo Zosa <erinzosa@ucla.edu>"]
license = "Apache-2.0"
readme = "README.md"
repository = "https://github.com/TeoZosa/cookiecutter-cruft-poetry-tox-pre-commit-ci-cd"
homepage = "https://github.com/TeoZosa/cookiecutter-cruft-poetry-tox-pre-commit-ci-cd"
keywords = [
    "Cookiecutter",
    "Cruft",
    "Dependabot",
    "GitHub Actions",
    "Poetry",
    "Pre-commit",
    "Python",
    "Release Drafter",
    "Tox"]
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python",
]
# Dummy package for `pip install .` compatibility
packages = [
    { include = "{{cookiecutter.package_name}}", from = "{{cookiecutter.project_slug}}" },
]

[tool.poetry.dependencies]
python = "^3.8,<3.12"
# Project boilerplate synchronizer
cruft = "^2.15.0"

# Project cookiecutter dependencies
hypothesis = "^6.84.3"
python-dotenv = "^1.0.0"
importlib-metadata = "^6.8.0"
structlog-sentry-logger = "^1.0.1"
typer = {extras = ["all"], version = "^0.9.0"}

[tool.poetry.group.dev.dependencies]
# Type Checking and Data Validation
mypy = "^1.5" # Static type checker

# Testing
pytest = "^7.3.1"
pytest-benchmark = "^3.4.1"
pytest-cov = "^4.1.0"
pytest-emoji = "^0.2.0"
pytest-mock = "^3.10.0"
pytest-sugar = "^0.9.7"
pytest-xdist = "^3.3.1"
xdoctest = "^1.1.1"
tox = "^4.10.0"

# Linting
## Code formatting
black = "^23.7.0" # see: https://black.readthedocs.io/en/stable/editor_integration.html
## Automation and management
pre-commit = "^3.3.2"

# Documentation
darglint = "^1.8.1"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
emoji = "^2.8.0"
myst-parser = "^1.0.0"
pygments = "^2.16.1"
sphinx = "^5.1.1"
sphinx-autodoc-typehints = "^1.23.4"
sphinx-rtd-theme = "^1.3.0"
sphinxcontrib-apidoc = "^0.3.0"
types-emoji = "^2.1.0"

#################################################################################
# Tooling configs                                                                #
#################################################################################
[tool.black]
line-length = 120

[mypy]
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_context = true
show_error_codes = true

[tool.pytest.ini_options]
addopts = ["-rfsxX", "-l", "--tb=short", "--strict-markers", "-vv", "--emoji", "--xdoctest"]
xfail_strict = true
testpaths = ["tests",]
norecursedirs = [".*", "*.egg", "build", "dist",]

[tool.ruff]
line-length = 120

select = [
    "F", # Pyflakes
    "E", "W", # pycodestyle
    "C90", # McCabe
    "I", # isort
    "UP", # pyupgrade
    "PLC", "PLE", "PLR", "PLW", # Pylint
]

ignore = [
    # pycodestyle:
    "E501", # Line too long (covered by Black)
]

fix = true

# Group violations by containing file.
format = "grouped"

# By default, always show source code snippets.
show-source = true

# Assume Python 3.8
# Note: helps prevent breaking autofixes from, e.g., pyupgrade
target-version = "py38"

[tool.ruff.isort]
# Note: Ruff implicitly uses `profile = "black"`
combine-as-imports = true

[tool.ruff.mccabe]
# cyclomatic complexity (https://github.com/PyCQA/mccabe)
max-complexity = 10

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
