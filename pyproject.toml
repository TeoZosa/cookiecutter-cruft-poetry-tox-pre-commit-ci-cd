[tool.poetry]
name = "cookiecutter-cruft-poetry-tox-pre-commit-ci-cd"
version = "0.4.0"
description = "SonoSim CorSAIR-standardized Python project creation and synchronization"
authors = ["Teo Zosa <teo@sonosim.com>"]
license = "Apache-2.0"
readme = "README.md"
repository = "https://github.com/TeoZosa/cookiecutter-cruft-poetry-tox-pre-commit-ci-cd"
homepage = "https://github.com/TeoZosa/cookiecutter-cruft-poetry-tox-pre-commit-ci-cd"
keywords = [
    "Cookiecutter",
    "Cruft",
    "Dependabot",
    "GitHub Actions",
    "Poetry",
    "Pre-commit",
    "Python",
    "Release Drafter",
    "Tox"]
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python",
]
# Dummy package for `pip install .` compatibility
packages = [
    { include = "{{cookiecutter.package_name}}", from = "{{cookiecutter.project_slug}}" },
]

[tool.poetry.dependencies]
python = "^3.8,<3.11"
# Project boilerplate synchronizer
cruft = "^2.9.0"

# Project cookiecutter dependencies
hypothesis = "^6.42.3"
python-dotenv = "^0.19.2"
importlib-metadata = "^4.11.3"
structlog-sentry-logger = "^0.17.4"
typer = {extras = ["all"], version = "^0.4.1"}

# Documentation
emoji = { version = "^1.7.0", optional = true}
myst-parser = { version = "^0.17.0", optional = true}
pygments = { version = "^2.11.2", optional = true}
sphinx = { version = "^4.5.0", optional = true}
sphinx-autodoc-typehints = { version = "^1.15.2", optional = true}
sphinx-rtd-theme = { version = "^1.0.0", optional = true}
sphinxcontrib-apidoc = { version = "^0.3.0", optional = true}
sphinxcontrib-confluencebuilder = { version = "^1.8.0", optional = true}
types-emoji = { version = "^1.2.7", optional = true}

[tool.poetry.dev-dependencies]
# Type Checking and Data Validation
mypy = "^0.942" # Static type checker

# Testing
pytest = "^7.1.1"
pytest-benchmark = "^3.4.1"
pytest-cov = "^3.0.0"
pytest-emoji = "^0.2.0"
pytest-mock = "^3.7.0"
pytest-sugar = "^0.9.4"
pytest-xdist = "^2.5.0"
icontract = "^2.6.1"
xdoctest = "^1.0.0"
tox = "^3.25.0"

# Linting
## Code formatting
black = "^22.3.0" # see: https://black.readthedocs.io/en/stable/editor_integration.html
## Code quality
pylint = "^2.13.5"
## Automation and management
pre-commit = "^2.18.1"

# Documentation
darglint = "^1.8.1"

[tool.poetry.extras]
docs = [
    "emoji", # Render emoji shortcodes
    "myst-parser",
    "pygments",
    "sphinx",
    "sphinx-autodoc-typehints",
    "sphinx-rtd-theme",
    "sphinxcontrib-apidoc",
    "sphinxcontrib-confluencebuilder",
    "types-emoji",
]

#################################################################################
# Tooling configs                                                               #
#################################################################################

[tool.flakeheaven]
# specify any flake8 options
exclude = [".*"] # Ignore dotfiles
# make output nice
format = "grouped"
# show line of source code in output
show_source = true

# list of plugins and rules for them
[tool.flakeheaven.plugins]
# cyclomatic complexity (https://github.com/PyCQA/mccabe)
mccabe = ["+*"]
# include everything in pyflakes except F401
pyflakes = ["+*", "-F401"]
# include everything in pycodestyle except what Black covers
pycodestyle = ["+*",
    "-E203", # Whitespace before ":"
    "-E501", # Line too long (82 > 78 characters)
    "-W503"  # Line break occurred before a binary operator <- this is now considered best practice by PEP 8
]

[tool.isort]
profile = "black"
atomic = true
combine_as_imports = true

[mypy]
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_context = true
show_error_codes = true

[tool.pylint.basic]
good-names-rgxs = ["^Test_.*$"]

[tool.pylint.messages_control]
disable = [
  # Explicitly document only as needed
  "missing-module-docstring",
  "missing-class-docstring",
  "missing-function-docstring",
  # Black & Flake8 purview
  "line-too-long",
  "bad-continuation",
  "c-extension-no-member",
]

[tool.pylint.similarities]
# Ignore imports when computing similarities.
ignore-imports = "yes"

[tool.pytest.ini_options]
addopts = ["-rfsxX", "-l", "--tb=short", "--strict-markers", "-vv", "--emoji", "--xdoctest"]
xfail_strict = true
testpaths = ["tests",]
norecursedirs = [".*", "*.egg", "build", "dist",]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
